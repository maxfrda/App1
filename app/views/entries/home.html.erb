    <!-- This checks to see if the database has an entry that contains today's date, if it does it will skip creation form for today's entry (line 20 - 55) -->
    <% if user_signed_in? && @user.entries.exists? %>
      <% sorted_entries = @user.entries.sort_by(&:created_at)%>
      <% sorted_entries.each do |entry| %>
        <% if entry.date == Date.today.strftime %>
          <% @home = "index" %>
          <% break %>
        <% end %>
      <% end %>
    <% end %>

<!-- sets counter for pages -->
    <% page = 1 %>

<!-- This is the document that the user types in to create entry -->
<div class="carousel-wrapper">
  <div class="carousel">
  <!-- code only runs if todays entry hasnt been made -->
  <% if @home != "index" %>
    <div class="carousel__entry initial">
      <div class="container-fluid">
        <div class="row">
          <div class="col-sm-12 col-lg-6 col-lg-offset-3">
            <div class="entries">
              <%= render 'shared/dropdown' %>
              <button id="save">
                Save
              </button>
              <div class="subtitle">
                <p>
                  <% if user_signed_in?%>
                    <%= @user.name.capitalize %>'s Diary
                  <% else %>
                    <%= link_to "Log-in", user_session_path %>
                    to save entries
                  <% end %>
                </p>
                <div class="wrapper">
                  <div class="divider div-transparent div-dot"></div>
                </div>
              </div>

              <div class="date">
                <h1>
                  <% date = Time.now.to_s %>
                 <%= Date.parse(date).strftime("%m/%d/%Y")%>
                </h1>
              </div>
              <!-- This is where you enter text  -->
              <div contenteditable="true" class="entry">
                <p class="tab">&nbsp;</p>
              </div>
              <div class="margin"></div>
              <div class="count">
                <p>- <%= page %> -</p>
                <% page += 1 %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  <% end %>

   <!--This will show entries if they exist  -->
    <% if user_signed_in? && @user.entries.exists? %>
    <!-- We have to move last index position to front if today's creation div is skipped (line 20-55) -->
      <% if @home == "index" %>
        <% sorted_entries = sorted_entries.rotate(-1) %>
      <% end %>
      <%  sorted_entries.each do |entry| %>
          <div class="carousel__entry">
            <div class="container-fluid">
              <div class="row">
                <div class="col-sm-12 col-lg-6 col-lg-offset-3">
                  <div class="entries-list">
                    <%= render 'shared/dropdown' %>
                    <button class="edit">
                      Edit
                    </button>
                    <button class="save">
                      Save
                    </button>
                    <button class="cancel">
                      Cancel
                    </button>
                    <div class="subtitle">
                      <p>
                        <%= @user.name.capitalize %>'s Diary
                      </p>
                    </div>
                    <div class="wrapper">
                      <div class="divider div-transparent div-dot"></div>
                    </div>
                    <div class="date">
                      <h1>
                        <% entry_date = entry.date %>
                        <% entry_date = Date.parse(entry_date).strftime("%m/%d/%Y") %>
                        <%= entry_date %>
                      </h1>
                    </div>
                    <!-- Shows each entry -->
                    <div class="entry">
                      <%= entry.body.html_safe %>
                    </div>
                    <% if entry.updates.exists? %>
                      <% entry.updates.each do |update| %>
                          <% update_date = update.date %>
                          <% update_date = Date.parse(update_date).strftime("%m/%d/%Y") %>
                          <p class="update-date ">Updated on <%= update_date %></p>
                          <p class="entry spacing"> <%= update.body.html_safe %></p>
                      <% end %>
                    <% end %>
                    <div class="toggle">
                      <div class="wrapper">
                        <div class="divider div-transparent"></div>
                      </div>
                      <div contenteditable="true" class="entry update-padding">
                        <p class="tab">&nbsp;</p>
                      </div>
                    </div>
                    <div class="margin2"></div>

                    <div class="count">
                      <p>- <%= page %> -</p>
                    </div>
                    <% page += 1 %>
                    <div class="update-id"><%= entry.id %></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>
    <% if user_signed_in? %>
      <%= link_to "Log out", destroy_user_session_path, method: :delete %>
      <% if @user.entries.count > 0 %>
        <div class="carousel__button--next"></div>
        <div class="carousel__button--prev"></div>
      <% end %>
    <% end %>


<!-- form for updating an entry -->
<form name="updateForm" class="new_update" id="new_update" onSubmit="formAction(this)" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="âœ“">
  <input id="update_body" type="text" name="update[body]">
  <button name="button" type="submit" id="update_button">submit</button>
</form>


<!-- Javascript injects content into this form and saves it as an entry instance -->
<%= form_for @entry do |f| %>
<%= f.text_field :body, id: "entry_body" %>
<%= f.button :submit, id: "button" %>
<% end %>



<!--  clicks the tag so that cursor shows up -->
<script >
var p = document.getElementsByClassName("entry")[0];
function clickTag(paragraph) {
  paragraph.focus(); // Click on the checkbox

}
clickTag(p);
</script>

<!-- injects contents of p tag into form and submits -->
<script >


  document.getElementById("save").onclick = myFunction;
  function myFunction() {
    var input = document.getElementById("entry_body");
    var content = $("div.carousel__entry.active p.tab");
    var finalContent = '';
    for (i = 0; i < content.length; i++) {
      var p = $("div.carousel__entry.active p.tab")[i].innerHTML;
      finalContent += `${p} <br>`;
    };
    input.value = (finalContent);
    document.getElementById("button").click();
}
</script>

<!-- This scrolls the page down automatically -->
<script>


var textHeight = 902

function yourFunction(){

    var docHeight = document.getElementsByClassName("entries")[0].clientHeight;
    var difference = textHeight - docHeight;
    // if (difference > 29) {
    //   textHeight = docHeight + 2
    // };

    if (docHeight >= textHeight) {
    window.scrollBy(0, 22);
    textHeight = docHeight + 22;



    // alert(numberOfLineBreaks);
  };

    setTimeout(yourFunction, 100);
}

yourFunction()



</script>


<!-- CAROUSEL FUNCTIONALITY -->



  <script type="text/javascript">

  !(function(d){
  // Variables to target our base class,  get carousel items, count how many carousel items there are, set the slide to 0 (which is the number that tells us the frame we're on), and set motion to true which disables interactivity.
  var itemClassName = "carousel__entry";
      items = d.getElementsByClassName(itemClassName),
      totalItems = items.length,
      slide = 0,
      moving = true;
      console.log(totalItems)

  // To initialise the carousel we'll want to update the DOM with our own classes
  function setInitialClasses() {

    // Target the last, initial, and next items and give them the relevant class.
    // This assumes there are three or more items.
    // first conditional prevents prev classlist from being added if there is only 1 entry
      if (items.length > 1) {
        items[totalItems - 1].classList.add("prev");
      }
      items[0].classList.add("active");
      items[1].classList.add("next");
  }


  // Set click events to navigation buttons

  function setEventListeners() {
    var next = d.getElementsByClassName('carousel__button--next')[0],
        prev = d.getElementsByClassName('carousel__button--prev')[0];

    next.addEventListener('click', moveNext);
    prev.addEventListener('click', movePrev);
  }

  // Disable interaction by setting 'moving' to true for the same duration as our transition (0.5s = 500ms)
  function disableInteraction() {
    moving = true;

    setTimeout(function(){
      moving = false
    }, 500);
  }

  function moveCarouselTo(slide) {

    // Check if carousel is moving, if not, allow interaction
    if(!moving) {

      // temporarily disable interactivity
      disableInteraction();

      // Preemptively set variables for the current next and previous slide, as well as the potential next or previous slide.
      var newPrevious = slide - 1,
          newNext = slide + 1,
          oldPrevious = slide - 2,
          oldNext = slide + 2;

      // Test if carousel has more than three items
      // if ((totalItems - 1) > 3) {

        // Checks if the new potential slide is out of bounds and sets slide numbers
        if (newPrevious <= 0) {
          oldPrevious = (totalItems - 1);
        } else if (newNext >= (totalItems - 1)){
          oldNext = 0;
        }

        // Check if current slide is at the beginning or end and sets slide numbers
        if (slide === 0) {
          newPrevious = (totalItems - 1);
          oldPrevious = (totalItems - 2);
          oldNext = (slide + 1);
        } else if (slide === (totalItems -1)) {
          newPrevious = (slide - 1);
          newNext = 0;
          oldNext = 1;
        }

        // necessary for carousel to work with exactly 3 items
         if (totalItems === 3){
          oldNext = 1;
        }
        // Now we've worked out where we are and where we're going, by adding and removing classes, we'll be triggering the carousel's transitions.

        // Based on the current slide, reset to default classes.
        items[oldPrevious].className = itemClassName;
        items[oldNext].className = itemClassName;

        // Add the new classes
        items[newPrevious].className = itemClassName + " prev";
        items[slide].className = itemClassName + " active";
        items[newNext].className = itemClassName + " next";
      }
  }

  // Next navigation handler
  function moveNext() {

    // Check if moving
    if (!moving) {

      // If it's the last slide, reset to 0, else +1
      if (slide === (totalItems - 1)) {
        slide = 0;
      } else {
        slide++;
      }

      // Move carousel to updated slide
      moveCarouselTo(slide);
    }
  }

  // Previous navigation handler
  function movePrev() {

    // Check if moving
    if (!moving) {

      // If it's the first slide, set as the last slide, else -1
      if (slide === 0) {
        slide = (totalItems - 1);
      } else {
        slide--;
      }

      // Move carousel to updated slide
      moveCarouselTo(slide);
    }
  }


  // Initialise carousel
  function initCarousel() {
    setInitialClasses();
    setEventListeners();

    // Set moving to false now that the carousel is ready
    moving = false;
  }

  // carousel is only initiated if the user has entries and is signed in
  <% if user_signed_in? && @user.entries.exists?  %>
  // make it rain
  initCarousel();

  // d.addEventListener('keydown', logKey);

  // if(!moving)

  // function logKey(e) {
  //   if (e.code === "ArrowRight"){
  //     moveNext()
  //   } else if (e.code === "ArrowLeft") {
  //     movePrev();
  //   };
  // }

  }(document));

  <% end %>
  </script>


<script>

  var edit = $("button.edit");
  var save = $("button.save");
  var cancel = $("button.cancel");
  // toggles edit off
  edit.click(function(){
    edit.hide();
    save.show();
    cancel.show();
    var parent =  $("div.carousel__entry.active div.toggle");
    parent.toggle();
    $("div.carousel__entry.active div.entry").focus();
    console.log("focusing");
    //toggles edit back on
    cancel.click(function(){
      console.log("test")
      edit.show();
      save.hide();
      parent.toggle();
      cancel.hide();
    });
  });


</script>

<script>

var edit = $("button.edit");

// changes form action dynamically depending on item entry number.
function formAction()
  {
    var id = $("div.carousel__entry.active div.update-id").html();
    document.updateForm.action = `/entries/${id}`;
}
edit.click(formAction);

</script>

<!-- this script injects content into update form -->
<script>

    $("button.save").click(function() {
    var update_button= document.getElementById("update_button");
      console.log("success");
      var input = document.getElementById("update_body");
      var content = $("div.carousel__entry.active div.entry p.tab"); // gets all items with class name tag and creates array
      var finalContent = '';
      console.log(content.length);
      for (i = 0; i < content.length; i++) { // filters out tabs that are in other entries
        var p = $("div.carousel__entry.active div.toggle p.tab")[i].innerHTML;
        finalContent += `${p} <br>`;
      };
      input.value = (finalContent);
     update_button.click();
  });

</script>

<!-- DROPDOWN CODE -->

<script>

//makes the variables globally available

function updateVariables() {

  window.dropdown = $("div.carousel__entry.active div.dropdown-child")[0];
  window.dots = $("div.carousel__entry.active span.fa-ellipsis-v")[0];
};

//will update variables and toggleOff the dropdown menu
function toggleOff(){

  updateVariables();

   dropdown.style.display = "none";
   dots.style.opacity = "20%";

};

//  will update variables and shows the drop down menu and changes background color of bubble
function toggle() {

  updateVariables();


  if (dropdown.style.display !== "block") {
    dropdown.style.display = "block";
    dots.style.opacity = "80%";

  } else {

    toggleOff();

  };
};


</script>


